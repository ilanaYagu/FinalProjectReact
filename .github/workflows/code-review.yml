name: Code Review
on:
  pull_request:
jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Generate code review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          mkdir -p reviews
          find src -type f \( -name "*.ts" -o -name "*.tsx" \) | while read file; do
            FILE_CONTENT=$(cat "$file" | sed 's/"/\\"/g')
            curl -s -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d "{\"model\": \"text-davinci-002\", \"prompt\": \"Review the following TypeScript code in a React application file '$file':\\n\\n${FILE_CONTENT}\", \"max_tokens\": 200, \"n\": 1, \"stop\": null, \"temperature\": 0.5, \"top_p\": 1, \"frequency_penalty\": 0, \"presence_penalty\": 0}" \
              -X POST https://api.openai.com/v1/engines/davinci-codex/completions \
              > "reviews/review_$(basename $file).json"
            cat "reviews/review_$(basename $file).json"
          done
      - name: Create review comments
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          const { execSync } = require('child_process');
          const { readFileSync } = require('fs');
          const { join } = require('path');

          const prNumber = process.env.GITHUB_REF.split('/')[2];
          const prFiles = execSync(`curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${prNumber}/files"`)
            .toString()
            .split('\n')
            .filter(Boolean)
            .map(line => JSON.parse(line).filename);

          prFiles.forEach(file => {
            const reviewFile = join('reviews', `review_${file.replace(/\//g, '_')}.json`);
            const reviewContent = readFileSync(reviewFile, 'utf-8');
            const reviewText = JSON.parse(reviewContent).choices[0].text.trim();

            const fileContent = readFileSync(file, 'utf-8');
            const fileLines = fileContent.split('\n');
            const comments = [];
            for (let i = 0; i < fileLines.length; i++) {
              if (fileLines[i].includes(reviewText)) {
                comments.push({
                  path: file,
                  position: i + 1,
                  body: reviewText,
                });
              }
            }

            comments.forEach(comment => {
              const payload = JSON.stringify({
                body: comment.body,
                path: comment.path,
                position: comment.position,
              });
              const url = `https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments`;
              execSync(`curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d '${payload}' -X POST ${url}`);
            });
          });
