import React, { useContext } from 'react';
import { TodoContext } from '../../context/tasksContext';
import { TodoContextType, Order, ITask, headCells, IPriority, TaskType } from '../../types/todoTypes';
import Button from "@material-ui/core/Button";
import { Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography } from '@material-ui/core';
import './TasksTable.css';
import EnhancedTasksTableHead from '../EnhancedTasksTableHead/EnhancedTasksTableHead';


function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {
    if (b[orderBy] < a[orderBy]) {
        return -1;
    }
    if (b[orderBy] > a[orderBy]) {
        return 1;
    }
    return 0;
}

function getComparator<Key extends keyof any>(
    order: Order,
    orderBy: Key,
): (
        a: { [key in Key]: number | string | IPriority | TaskType | Date | undefined },
        b: { [key in Key]: number | string | IPriority | TaskType | Date | undefined },
    ) => number {
    return order === 'desc'
        ? (a, b) => descendingComparator(a, b, orderBy)
        : (a, b) => -descendingComparator(a, b, orderBy);
}

interface TasksTableProps {
    handleOpenDeleteTaskDialog(id: string): void;
    handleOpenUpdateTaskDialog(id: string): void;
}

const TasksTable = ({ handleOpenDeleteTaskDialog, handleOpenUpdateTaskDialog }: TasksTableProps) => {
    const { todos } = useContext(TodoContext) as TodoContextType;
    const [order, setOrder] = React.useState<Order>('asc');
    const [orderBy, setOrderBy] = React.useState<keyof ITask>('id');
    const [page, setPage] = React.useState(0);
    const [rowsPerPage, setRowsPerPage] = React.useState(5);

    const emptyRows =
        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - todos.length) : 0;


    const handleRequestSort = (
        event: React.MouseEvent<unknown>,
        property: keyof ITask,
    ) => {
        const isAsc = orderBy === property && order === 'asc';
        setOrder(isAsc ? 'desc' : 'asc');
        setOrderBy(property);
    };


    const handleChangePage = (event: unknown, newPage: number) => {
        setPage(newPage);
    };

    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
        setRowsPerPage(parseInt(event.target.value, 10));
        setPage(0);
    };

    const renderTableBody = () => {
        return (
            <TableBody>
                {todos.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).sort(getComparator(order, orderBy))
                    .map((task, index) => {
                        return (
                            <TableRow
                                hover
                                key={task.id}
                                className="TableRow"
                            >
                                <TableCell>{task.id}</TableCell>
                                <TableCell>{task.title}</TableCell>
                                <TableCell>{task.description}</TableCell>
                                <TableCell>{task.status}</TableCell>
                                <TableCell>
                                    <Button id="updateTaskButton" color="primary" variant="outlined" onClick={() => handleOpenUpdateTaskDialog(task.id)} >
                                        Update
                                    </Button> {" "}
                                    <Button id="deleteTaskButton" variant="outlined" onClick={() => handleOpenDeleteTaskDialog(task.id)} >
                                        Delete
                                    </Button>
                                </TableCell>
                            </TableRow>
                        );
                    })}

                {emptyRows > 0 && (
                    <TableRow style={{ height: (rowsPerPage - emptyRows) * 50 }}>
                        <TableCell
                            colSpan={headCells.length + 1}
                        />
                    </TableRow>
                )}
            </TableBody>
        );
    };

    return (
        <Table className="TasksTable">
            <EnhancedTasksTableHead
                order={order}
                orderBy={orderBy}
                onRequestSort={handleRequestSort}
                rowCount={todos.length}
            />
            {renderTableBody()}
            <TablePagination
                rowsPerPageOptions={[5, 10, 25]}
                component="div"
                count={todos.length}
                rowsPerPage={rowsPerPage}
                page={page}
                onPageChange={handleChangePage}
                onRowsPerPageChange={handleChangeRowsPerPage}
            />
        </Table>

    );
};

export default TasksTable;




